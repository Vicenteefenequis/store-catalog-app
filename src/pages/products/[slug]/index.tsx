import http from '@/http';
import { Product } from '@/model';
import { Card, CardMedia, CardContent, Typography, CardActions, Button, CardHeader } from '@material-ui/core';
import { GetStaticPaths, GetStaticProps, NextPage } from 'next';
import Head from 'next/head';
import { useRouter } from 'next/router';
import React from 'react';
import axios from 'axios';
import Link from 'next/link';

interface ProductDetailPageProps {
    product: Product
}

const ProductDetailPage: NextPage<ProductDetailPageProps> = ({ product }) => {

    const router = useRouter()

    if (router.isFallback) {
        return <div>Carregando...</div>
    }

    return (
        <>
            <Head>
                <title>{product.name} - Listagem de Produtos</title>
                <meta name="description" content="Generated by create next app" />
                <meta name="viewport" content="width=device-width, initial-scale=1" />
            </Head>
            <Card>
                <CardHeader title={product.name.toUpperCase()} subheader={`R$ ${product.price}`} />
                <CardActions>
                    <Link href="/products/[slug]/order" as={`/products/${product.slug}/order`} passHref>
                        <Button size="small" color="primary">Comprar</Button>
                    </Link>
                </CardActions>
                <CardMedia style={{ paddingTop: "56%" }} image={product.image_url} />
                <CardContent>
                    <Typography variant="body2" color="textSecondary" component="p">{product.description}</Typography>
                </CardContent>
            </Card>
        </>
    );
}


export default ProductDetailPage;

export const getStaticProps: GetStaticProps<ProductDetailPageProps> = async (context) => {
    const { slug } = context.params!

    try {
        const { data: product } = await http.get(`products/${slug}`)
        return {
            props: {
                product
            },
            revalidate: 1 * 60 * 2
        }
    } catch (e) {
        if (axios.isAxiosError(e) && e.response?.status === 404) {
            return {
                notFound: true
            }
        }
        throw e;
    }

}

export const getStaticPaths: GetStaticPaths = async (context) => {
    const { data: products } = await http.get('products')

    const paths = products.map((product: Product) => {
        return {
            params: {
                slug: product.slug
            }
        }
    })

    return { paths, fallback: "blocking" }
}